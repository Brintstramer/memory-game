{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://memory-game/./src/lib/template-engine.js","webpack://memory-game/./src/js/templateGameField.js","webpack://memory-game/./src/js/script.js"],"sourcesContent":["export function templateEngine(block) {\n    if (block === undefined || block === null || block === false) {\n        return document.createTextNode('');\n    }\n    if (\n        typeof block === 'string' ||\n        typeof block === 'number' ||\n        block === true\n    ) {\n        return document.createTextNode(block);\n    }\n    if (Array.isArray(block)) {\n        const fragment = document.createDocumentFragment();\n        block.forEach((element) => {\n            fragment.appendChild(templateEngine(element));\n        });\n        return fragment;\n    }\n\n    const result = document.createElement(block.tag);\n\n    if (block.cls) {\n        const classes = [].concat(block.cls);\n        classes.forEach((cls) => {\n            result.classList.add(cls);\n        });\n    }\n    if (block.attrs) {\n        const keys = Object.keys(block.attrs);\n        keys.forEach((key) => {\n            result.setAttribute(key, block.attrs[key]);\n        });\n    }\n\n    result.appendChild(templateEngine(block.content));\n\n    return result;\n}\n\ntemplateEngine();\n","export function templateHeader() {\n    return {\n        tag: 'div',\n        cls: 'header',\n        content: [\n            {\n                tag: 'div',\n                cls: 'header__time',\n                content: '00.00',\n            },\n            {\n                tag: 'button',\n                cls: 'header__restart',\n                content: 'Начать заново',\n            },\n        ],\n    };\n}\n\nexport function templateCardsField() {\n    return {\n        tag: 'div',\n        cls: 'cards',\n    };\n}\n\nexport function templateCards(card) {\n    return {\n        tag: 'div',\n        cls: 'cards__card',\n        attrs: {\n            style: `background-image: url(./static/img/${card}.svg)`,\n            'data-card': card,\n        },\n    };\n}\n","import { templateEngine } from '../lib/template-engine';\nimport { templateHeader } from './templateGameField';\nimport { templateCardsField } from './templateGameField';\nimport { templateCards } from './templateGameField';\n\nconst app = {\n    level: '',\n    screens: {},\n    timer: [],\n    cards: [\n        'spadesA',\n        'spadesK',\n        'spadesQ',\n        'spadesJ',\n        'spades10',\n        'spades9',\n        'spades8',\n        'spades7',\n        'spades6',\n        'heartsA',\n        'heartsK',\n        'heartsQ',\n        'heartsJ',\n        'hearts10',\n        'hearts9',\n        'hearts8',\n        'hearts7',\n        'hearts6',\n        'diamondsA',\n        'diamondsK',\n        'diamondsQ',\n        'diamondsJ',\n        'diamonds10',\n        'diamonds9',\n        'diamonds8',\n        'diamonds7',\n        'diamonds6',\n        'clubsA',\n        'clubsK',\n        'clubsQ',\n        'clubsJ',\n        'clubs10',\n        'clubs9',\n        'clubs8',\n        'clubs7',\n        'clubs6',\n    ],\n    'generated-cards': [],\n    'user-cards': [],\n};\n\nconst appPage = document.querySelector('.app');\nconst btnStart = appPage.querySelector('.difficulty-level__btn-start');\nconst btnsLevel = appPage.querySelectorAll('.difficulty-level__btns__btn');\n// let time;\n// let seconds = 0,\n//   minutes = 0;\nlet cardsField;\nlet firstCard = false;\nlet secondCard = false;\nlet firstCardValue;\nlet openedCards = 0;\n\nbtnsLevel.forEach((btnLevel) => {\n    btnLevel.addEventListener('click', () => {\n        app.level = btnLevel.textContent;\n    });\n});\n\nbtnStart.addEventListener('click', () => {\n    switch (app.level) {\n        case '1':\n            renderGameScreen(3);\n            break;\n        case '2':\n            renderGameScreen(6);\n            break;\n        case '3':\n            renderGameScreen(9);\n            break;\n        default:\n            break;\n    }\n});\n\nfunction renderGameScreen(cards) {\n    appPage.textContent = '';\n\n    appPage.appendChild(templateEngine(templateHeader()));\n    appPage.appendChild(templateEngine(templateCardsField()));\n\n    genRandomCards(cards);\n\n    genCardsField();\n\n    // time = appPage.querySelector(\".header__time\");\n    // app.timer = setInterval(genTime, 1000);\n}\n\n// const btnRestart = appPage.querySelector(\".header__restart\");\n// btnRestart.addEventListener(\n//   \"click\",\n//   (restartGame = () => {\n//     clearInterval(timer);\n//   })\n// );\n\n// function genTime() {\n//     seconds += 1;\n\n//     if (seconds >= 60) {\n//         minutes += 1;\n//         seconds = 0;\n//     }\n\n//     let secondsValue = seconds < 10 ? `0${seconds}` : seconds;\n//     let minutesValue = minutes < 10 ? `0${minutes}` : minutes;\n//     time.innerHTML = `${minutesValue}.${secondsValue}`;\n// }\n\nfunction genRandomCards(cards) {\n    for (let i = 0; i < cards; i++) {\n        const randomIndex = Math.floor(Math.random() * 36);\n\n        app['generated-cards'].push(app.cards[randomIndex]);\n    }\n}\n\nfunction genCardsField() {\n    cardsField = appPage.querySelector('.cards');\n\n    cardsField.innerHTML = '';\n\n    app['generated-cards'] = [\n        ...app['generated-cards'],\n        ...app['generated-cards'],\n    ];\n\n    app['generated-cards'].sort(() => Math.random() - 0.5);\n\n    cardsField.appendChild(\n        templateEngine(app['generated-cards'].map(templateCards))\n    );\n\n    const cards = cardsField.querySelectorAll('.cards__card');\n\n    cards.forEach((card) => {\n        setTimeout(() => {\n            card.style.backgroundImage = \"url('./static/img/card-back.svg')\";\n        }, 5000);\n\n        card.addEventListener('click', () => {\n            if (!card.classList.contains('matched')) {\n                card.style.backgroundImage = `url('./static/img/${card.dataset.card}.svg')`;\n\n                if (!firstCard) {\n                    firstCard = card;\n\n                    firstCardValue = card.getAttribute('data-card');\n                } else {\n                    secondCard = card;\n\n                    let secondCardValue = card.getAttribute('data-card');\n\n                    if (firstCardValue === secondCardValue) {\n                        firstCard.classList.add('matched');\n                        secondCard.classList.add('matched');\n\n                        firstCard = false;\n\n                        openedCards += 1;\n\n                        if (\n                            openedCards ===\n                            Math.floor(app['generated-cards'].length / 2)\n                        ) {\n                            alert('Вы победили!');\n                        }\n                    } else {\n                        // let [tempFirst, tempSecond] = [firstCard, secondCard];\n\n                        // firstCard = false;\n                        // secondCard = false;\n\n                        const delay = setTimeout(() => {\n                            alert('Вы проиграли!');\n                            // tempFirst.style.backgroundImage =\n                            //   \"url('src/static/img/card-back.svg')\";\n                            // tempSecond.style.backgroundImage =\n                            //   \"url('src/static/img/card-back.svg')\";\n                        }, 900);\n                    }\n                }\n            }\n        });\n    });\n}\n"],"names":["templateEngine","block","document","createTextNode","Array","isArray","fragment","createDocumentFragment","forEach","element","appendChild","result","createElement","tag","cls","concat","classList","add","attrs","Object","keys","key","setAttribute","content","templateCards","card","style","app","level","screens","timer","cards","appPage","querySelector","btnStart","btnsLevel","querySelectorAll","cardsField","firstCardValue","firstCard","secondCard","openedCards","renderGameScreen","textContent","i","randomIndex","Math","floor","random","push","genRandomCards","innerHTML","sort","map","setTimeout","backgroundImage","addEventListener","contains","dataset","secondCardValue","getAttribute","length","alert","btnLevel"],"sourceRoot":""}